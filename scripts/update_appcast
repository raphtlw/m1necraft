#!/usr/bin/env python3

from os import getcwd, mkdir, path, environ, system
from pathlib import Path
from shutil import rmtree
from github import Github
from glob import glob
from xml.etree import ElementTree
import wget


# Constants
PRODUCTION = "CI" in environ
DEVELOPMENT = not PRODUCTION

APP_NAME = "M1necraft"
ARCHIVE_PATH = path.join(getcwd(), "releases")
SPARKLE_TOOLS_PATH = (
    getcwd()
    if PRODUCTION
    else glob(
        path.join(
            Path.home(),
            "Library",
            "Developer",
            "Xcode",
            "DerivedData",
            "M1necraft-*",
            "SourcePackages",
            "artifacts",
            "sparkle",
        )
    )[0]
)
APPCAST_PATH = "appcast.xml"
RELEASE_DOWNLOAD_URL_PREFIX = "https://github.com/raphtlw/m1necraft/releases/download"
PRIVATE_KEY = environ.get("SPARKLE_PRIVATE_KEY", "")


def quoted(string: str) -> str:
    return '"' + string + '"'


def main():
    print(f"PRODUCTION: {PRODUCTION}")

    # Generate archives folder
    github_token = environ.get("GITHUB_TOKEN")
    assert github_token, "ERROR: GITHUB_TOKEN environment variable not found"

    g = Github(github_token)

    if path.exists(ARCHIVE_PATH):
        rmtree(ARCHIVE_PATH)
    mkdir(ARCHIVE_PATH)

    for release in g.get_user().get_repo("m1necraft").get_releases():
        if release.draft:
            continue  # skip this release
        for asset in release.get_assets():
            if asset.name == f"{APP_NAME}.app.zip":
                ver = release.tag_name.strip("v")
                wget.download(
                    asset.browser_download_url,
                    f"{path.join(ARCHIVE_PATH, APP_NAME)} {ver}.app.zip",
                )
    print()

    # Generate appcast
    out = system(
        " ".join(
            [
                path.join(SPARKLE_TOOLS_PATH, "bin", "generate_appcast"),
                quoted(ARCHIVE_PATH),
                "-o",
                quoted(APPCAST_PATH),
                *(["-s", quoted(PRIVATE_KEY)] if PRODUCTION else []),
            ]
        )
    )
    assert out == 0, "Command executed with return > 0, exiting to be safe."

    # Correct resulting URLs
    ElementTree.register_namespace(
        "sparkle", "http://www.andymatuschak.org/xml-namespaces/sparkle"
    )
    tree = ElementTree.parse(APPCAST_PATH)
    for item in tree.findall(".//item"):
        enclosure = item.find("enclosure")
        assert (
            enclosure is not None
        ), f"Unable to find enclosure tag in {APPCAST_PATH} xml"
        version_tag = item.find("title")
        assert (
            version_tag is not None
        ), f"Unable to find version tag in {APPCAST_PATH} xml"
        assert version_tag.text
        version = version_tag.text

        enclosure.set(
            "url", f"{RELEASE_DOWNLOAD_URL_PREFIX}/v{version}/{APP_NAME}.app.zip"
        )

    tree.write(APPCAST_PATH, xml_declaration=True, encoding="UTF-8")


if __name__ == "__main__":
    main()
